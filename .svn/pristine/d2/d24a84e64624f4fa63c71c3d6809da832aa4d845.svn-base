package view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;

import javax.swing.JPanel;

/**
 * 
 * @author Lindsee Purnell
 * @version November 7, 2017
 */
public class DrawingPanel extends JPanel {
    
    /**
     * The color to paint with.
     */
    public static final Color LINE_COLOR = new Color(51, 0, 111); 

    /**
     * The line width.
     */
    public static final int LINE_WIDTH = 5;
    
    /** */ 
    private final Line2D myLine; 
    
    /** */
    public DrawingPanel() {
        setBackground(Color.WHITE); 
        setPreferredSize(new Dimension(600,600)); 
        myLine = new Line2D.Double();
        
        addMouseListener(new MyMouseListener()); 
    }
    
    /**
     * Paints the current path.
     * 
     * @param theGraphics The graphics context to use for painting.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;

        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setPaint(LINE_COLOR);
        g2d.setStroke(new BasicStroke(LINE_WIDTH));
        g2d.draw(myLine);
    }
    
    /**
     * Listens for mouse clicks, to draw on our panel.
     */
    private class MyMouseListener extends MouseAdapter {
        /**
         * Handles a click event.
         * 
         * @param theEvent The event.
         */
        @Override
        public void mouseClicked(final MouseEvent theEvent) {
            private Point point = new Point(20, 30); 
            myLine.setLine(point, theEvent.getPoint());
            repaint();
        }
    }
}
